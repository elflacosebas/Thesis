dataIn <- read.table("https://raw.githubusercontent.com/elflacosebas/thesis/master/mexico.txt",header = T)
colnames(dataIn) <-c("x","y")


require(nloptr)

#dataIn$std.prop <- dataIn$proportion/sum(dataIn$proportion)
y <- approxfun(c(dataIn$x), c(dataIn$y))
plot(dataIn$y)


exp.test <-function(x1,a1,alpha1,a2,mu2,alpha2,lambda2,a3,mu3,alpha3,lambda3,c1){
  x <- x1
  exp1 <- (a1 * exp(-alpha1 * x)) + (a2 * exp(-alpha2 * (x-mu2) - exp(-lambda2 * (x - mu2)))) + (a3 * exp(-alpha3 * (x-mu3) - exp(-lambda3 * (x - mu3)))) + c1
  
  return(exp1)
}

################################################################## 
rc.11 <- expression(log((a1 * exp(-alpha1 * x)) + (a2 * exp(-alpha2 * (x-mu2) - exp(-lambda2 * (x - mu2)))) + (a3 * exp(-alpha3 * (x-mu3) - exp(-lambda3 * (x - mu3)))) + c1))

sapply(all.vars(rc.11), function(v){
  D(rc.11, v)
})

####################### Generaci칩n de par치metros aleatorios. 

genRandomPar <- function()  {      
  
  #primera exponencial
  a1 <- runif(1, 0, 1.00)
  alpha1 <- runif(1, 0, 1.00)
  
  #segunda exponencial
  a2 <- runif(1, 0.05, 0.10)
  alpha2 <- runif(1, 0.10, 0.20)
  mu2 <- runif(1, 15, 25)
  lambda2 <- runif(1, 0.25, 0.60)
  
  #tercera exponencial
  a3 <- runif(1, 0, 1.00)
  alpha3 <- runif(1, 0, 1.00)
  mu3 <- runif(1, 80, 90)
  lambda3 <- runif(1, 0, 1.00)
  
  #constante
  c1 <- runif(1,0.01,0.05)
  parameters_0 <- c(a1=a1,alpha1=alpha1,a2=a2,mu2=mu2,alpha2=alpha2,lambda2=lambda2,a3=a3,mu3=mu3,alpha3=alpha3
                    ,lambda3=lambda3,c1=c1)
  
  return(parameters_0)
}

###########################################################################

ModelObject <- setRefClass('ModelObject', 
                           fields = list(
                             name = 'character',
                             expr = 'expression'
                           ),
                           methods = list(
                             value = function(p, data){
                               eval(.self$expr, c(as.list(p), as.list(data)))
                             },
                             jacobian = function(p, data){
                               J = t(sapply(all.vars(.self$expr), function(v, p, data){
                                 # if(v != "c1"){
                                 eval(D(.self$expr, v), c(as.list(p), as.list(data)))
                                 # } else { rep(1, nrow(data))}
                               }, p=p, data=data))
                               
                               return(J[names(p),,drop=F])
                             },
                             gradient = function(p, data){
                               r = data$y - value(p, data)
                               return(-jacobian(p, data) %*% r)
                             },
                             hessian = function(p, data){
                               J = jacobian(p, data)
                               return(J %*% t(J))
                             }
                           )
)


parameters_0 <- genRandomPar()

mo = ModelObject(
  name = 'castro_11', 
  expr = rc.11
)


###########################################################################

ini <- Sys.time()

si_mula <- function(ite){

valSim <- NA
colnames(dataIn) <- c("x","y")
plot(dataIn, cex=0.2)
for(i in 1:ite){
  parameters_0 <-  genRandomPar()
  graProof <- mo$gradient(p= parameters_0, data = dataIn)
  while((any(is.na(graProof)) & any(is.nan(graProof)))){
    parameters_0 <-  genRandomPar()
    graProof <- mo$gradient(p= parameters_0, data = dataIn)
  }
  
  fit1 <-  nlminb(parameters_0 , function(p, data){
    r = data$y - mo$value(p,data)
    return(r %*% r)
  }, gradient = mo$gradient, hessian = mo$hessian, data=dataIn)
  
  lines(dataIn$x, mo$value(fit1$par,dataIn), col="blue")
  valSim <- rbind(valSim,c(parameters_0, fit1$par, fit1$objective, fit1$message))
}

dataSimul <- data.frame(apply(valSim[,-ncol(valSim)],c(1,2),as.numeric),valSim[,ncol(valSim)])
dataSimul <- dataSimul[-1,]
colnames(dataSimul) <- c(paste(colnames(valSim)[1:11],'_0',sep =''), paste(colnames(valSim)[12:22],'_hat',sep =''),'optimResult',"mesage" )
bestPar <- dataSimul[which.min(dataSimul$optimResult),12:22]
names(bestPar) <- names(parameters_0)
return(bestPar, time)

}


cien <- si_mula(100)
mil <- si_mula(1000)
cinco.mil <- si_mula(5000)
diez.mil <- si_mula(10000)
cien.mil <- si_mula(100000)
mill칩n <- si_mula(1000000)

x11()
plot(dataIn)
lines(dataIn$x, mo$value(bestPar ,dataIn), col="red")

fin <- Sys.time()

time = fin-ini
time




############################### escogencia de los par치metros iniciales. 

require(rpart)
require(rpart.plot)

model <- optimResult ~ a1_0 +  alpha1_0  +  a2_0 + mu2_0 + alpha2_0 + lambda2_0 + a3_0 + mu3_0 + alpha3_0 + lambda3_0 +  c1_0

#model <- optimResult ~ .

x11()
rpart.plot(rpart(model, data=dataSimul), cex=0.8)

fitSimul <- lm(model, data = dataSimul)
summary(fitSimul)


arbol <- rpart(model, data=dataSimul)
printcp(arbol)
plotcp(arbol)

parbolrpart <- prune(arbol, cp = arbol$cptable[which.min(arbol[,'xerror']), 'cp'])
printcp(arbol)
plotcp(arbol)



testpred <- predict(arbol, data = dataSimul, type = 'class')


#################






